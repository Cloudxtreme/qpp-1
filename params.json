{"name":"Quantum++","tagline":"A C++11 quantum computing library","body":"# Quantum++\r\n\r\nQuantum++ is a template-based header-only C++11 quantum computing library, \r\ndeveloped using Eigen3 linear algebra library http://eigen.tuxfamily.org/. \r\nCopyright (c) 2013 - 2014 Vlad Gheorghiu, vgheorgh AT gmail DOT com.\r\n\r\nIf anyone else is interesting in contributing please let me known. \r\nThere is still work left to be done, and I can provide you with more details about what I have in mind. \r\nTo contribute, you need to have a decent knowledge of C++ (preferably C++11), \r\nincluding templates and STL, a basic knowledge of quantum computing and linear algebra, \r\nand some working experience with Eigen3.\r\n\r\nThe ultimate goal of this project is to build a universal quantum simulator, \r\napplicable to a vast majority of problems in quantum information/computation. \r\nThe simulator should be fast but nevertheless user-friendly for anyone with a basic knowledge of C/C++. \r\n\r\n---\r\nQuantum++ is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nQuantum++ is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with Quantum++.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n---\r\n## Building instructions\r\n\r\n### Configuration:\r\n\r\n- Compiler: `g++` >= 4.7 (for C++11 support)\r\n- Eigen3 library located in `$HOME/eigen_3.2.2`\r\n- Quantum++ library located in `$HOME/qpp`\r\n- MATLAB compiler include header files: `/Applications/MATLAB_R2014b.app/extern/include`\r\n- MATLAB compiler shared library files: `/Applications/MATLAB_R2014b.app/bin/maci64`\r\n\r\n===\r\n### Building instructions for `g++`\r\n\r\n- Example file: `example.cpp` (current folder, from where `g++` is run)\r\n- Output binary: `qpp` (current folder, from where `g++` is run)\r\n\r\n#### Release version (without MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp -mtune=native -msse3 -O3 -DNDEBUG -DEIGEN_NO_DEBUG -isystem $HOME/eigen_3.2.2 -I$HOME/qpp/include example.cpp -o qpp\r\n\r\n#### Debug version (without MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp -mtune=native -msse3 -g3 -DDEBUG -isystem $HOME/eigen_3.2.2 -I $HOME/qpp/include example.cpp -o qpp\r\n\r\n#### Release version (with MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp -mtune=native -msse3 -O3 -DNDEBUG -DEIGEN_NO_DEBUG -isystem $HOME/eigen_3.2.2 -I$HOME/qpp/include -I/Applications/MATLAB_R2014b.app/extern/include -L/Applications/MATLAB_R2014b.app/bin/maci64 -lmx -lmat example.cpp -o qpp\r\n\r\n#### Debug version (with MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp -mtune=native -msse3 -g3 -DDEBUG -isystem $HOME/eigen_3.2.2 -I $HOME/qpp/include -I /Applications/MATLAB_R2014b.app/extern/include -L /Applications/MATLAB_R2014b.app/bin/maci64 -lmx -lmat example.cpp -o qpp\r\n\r\n===\r\n### Building using `cmake`\r\n\r\nThe current version of the repository has a `CMakeLists.txt` configuration file for building using `cmake`\r\n (`cmake` needs to be installed). To build the project using `cmake`, I recommend an out-of-source build, \r\n i.e., from the root of the project (where `./include` is located), type\r\n\r\n    mkdir ./build\r\n    cd ./build\r\n    cmake ..\r\n    make\r\n\r\nThe above commands build the relase version (default) executable `qpp`, \r\nwithout MATLAB support (default), inside the directory `./build`. \r\nTo build a different configuration, e.g. debug version with MATLAB support, \r\ntype from the root of the project\r\n\r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_MATLAB=ON\r\n    make\r\n    \r\nOr, to disable OpenMP support (enabled by default), type\r\n   \r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DWITH_OPENMP=OFF\r\n    make\r\n\r\nTo change the location of `Eigen3` library or the location of MATLAB installation, \r\nedit the `CMakeLists.txt` file. See also `CMakeLists.txt` for additional options.\r\nDo not forget to remove everything from the `./build` directory before a fresh build!\r\n\r\n===\r\n### Building using `make`\r\n\r\nFor convenience, the current version of the repository has also a set of Makefiles available \r\nunder the folder`./Makefile.examples`. To build the executable this way (without using `cmake`), \r\ncopy into the root of the project \r\nan appropriate Makefile from `./Makefile.examples`, name it `Makefile`, \r\nthen type `make` (for release version) or `make debug` (for debug version) to produce the executable `qpp`.\r\n\r\n===\r\n### Additional remarks\r\n\r\n- The C++ compiler must be C++11 compliant.\r\n\r\n- If your compiler does not support OpenMP (as it is the case e.g with `clang++`), disable it in your build, as the linker may not find the `gomp` library.\r\n\r\n- If you want to run the program on OS X with MATLAB support, make sure that the environment variable \r\n`DYLD_LIBRARY_PATH` is set to point to the MATLAB compiler library location, see the `run_OSX_MATLAB` script. \r\nExample of run command from inside the directory where the executable `qpp` is located:\r\n\t\r\n\t    export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:\"/Applications/MATLAB_R2014b.app/bin/maci64\"; ./qpp\r\nOtherwise, you will get a runtime error like `dyld: Library not loaded: @rpath/libmat.dylib`\r\n\r\n- `Makefiles.examples` and `CMakeLists.txt` are provided for convenience.\r\nThe final version of the library will consist only of header files, \r\nand it is the user's responsability to create an appropriate build system.\r\n","google":"UA-56739447-2","note":"Don't delete this file! It's used internally to help with page regeneration."}