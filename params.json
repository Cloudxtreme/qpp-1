{"name":"Quantum++","tagline":"C++11 quantum computing library - v0.1","body":"# Quantum++ \r\n\r\nQuantum++ is a template-based header-only C++11 quantum computing library, \r\ndeveloped using Eigen3 linear algebra library <http://eigen.tuxfamily.org>. \r\nCopyright (c) 2013 - 2014 Vlad Gheorghiu, vgheorgh AT gmail DOT com.\r\n\r\nIf anyone else is interesting in contributing please let me known. \r\nThere is still work left to be done, and I can provide you with more details \r\nabout what I have in mind. To contribute, you need to have a decent knowledge \r\nof C++ (preferably C++11), including templates and STL, \r\na basic knowledge of quantum computing and linear algebra, \r\nand some working experience with Eigen3.\r\n\r\nThe ultimate goal of this project is to build a universal quantum simulator, \r\napplicable to a vast majority of problems in quantum information/computation.\r\nThe simulator should be fast but nevertheless user-friendly \r\nfor anyone with a basic knowledge of C/C++. \r\n\r\n---\r\nQuantum++ is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nQuantum++ is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with Quantum++.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n---\r\n## Building instructions\r\n\r\n### Configuration:\r\n\r\n- Compiler: `g++` >= 4.8 (for good C++11 support)\r\n- Eigen3 library located in `$HOME/eigen_3.2.2`\r\n- Quantum++ library located in `$HOME/qpp`\r\n- MATLAB compiler include header files:\r\n`/Applications/MATLAB_R2014b.app/extern/include`\r\n- MATLAB compiler shared library files:\r\n`/Applications/MATLAB_R2014b.app/bin/maci64`\r\n\r\n\r\n### Building instructions for `g++` without a build system\r\n\r\n- Example file: `$HOME/qpp/examples/example.cpp`\r\n- Output executable: `$HOME/qpp/examples/example`\r\n- Must run the commands below from inside the directory `$HOME/qpp/examples` \r\n\r\n#### Release version (without MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -O3 -DNDEBUG -DEIGEN_NO_DEBUG \\\r\n         -isystem $HOME/eigen_3.2.2 -I $HOME/qpp/include \\\r\n         example.cpp -o example\r\n\r\n#### Debug version (without MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -g3 -DDEBUG \\\r\n         -isystem $HOME/eigen_3.2.2 -I $HOME/qpp/include \\\r\n          example.cpp -o example\r\n\r\n#### Release version (with MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -O3 -DNDEBUG -DEIGEN_NO_DEBUG \\\r\n         -isystem $HOME/eigen_3.2.2 -I $HOME/qpp/include \\\r\n         -I/Applications/MATLAB_R2014b.app/extern/include \\\r\n         -L/Applications/MATLAB_R2014b.app/bin/maci64 \\\r\n         -lmx -lmat example.cpp -o example\r\n\r\n#### Debug version (with MATLAB support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -g3 -DDEBUG \\\r\n         -isystem $HOME/eigen_3.2.2 -I $HOME/qpp/include \\\r\n         -I /Applications/MATLAB_R2014b.app/extern/include \\\r\n         -L /Applications/MATLAB_R2014b.app/bin/maci64 \\\r\n         -lmx -lmat example.cpp -o example\r\n\r\n\r\n### Building using `cmake`\r\n\r\nThe current version of the repository has a `CMakeLists.txt` configuration file \r\nfor building examples using `cmake` (`cmake` needs to be installed). To build an \r\nexample using `cmake`, I recommend an out-of-source build, \r\n i.e., from the root of the project (where `./include` is located), type\r\n\r\n    mkdir ./build\r\n    cd ./build\r\n    cmake ..\r\n    make\r\n\r\nThe above commands build the relase version (default) executable `qpp`, \r\nfrom the source file `./examples/example.cpp`,\r\nwithout MATLAB support (default), inside the directory `./build`. \r\nTo build a different configuration, e.g. debug version with MATLAB support, \r\ntype from the root of the project\r\n\r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_MATLAB=ON ..\r\n    make\r\n    \r\nOr, to disable OpenMP support (enabled by default), type\r\n   \r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DWITH_OPENMP=OFF ..\r\n    make\r\n\r\nTo change the name of the example file, the location of `Eigen3` \r\nlibrary or the location of MATLAB installation, \r\nedit the `CMakeLists.txt` file. See also `CMakeLists.txt` \r\nfor additional options. \r\nDo not forget to remove everything from the `./build` directory \r\nbefore a fresh build!\r\n\r\n\r\n## Additional remarks\r\n\r\n- The C++ compiler must be C++11 compliant.\r\n\r\n- If your compiler does not support OpenMP \r\n(as it is the case e.g with `clang++`), disable OpenMP it in your build, \r\nas otherwise the linker may not find the `gomp` library.\r\n\r\n- If you run the program on OS X with MATLAB support, make sure that \r\nthe environment variable `DYLD_LIBRARY_PATH` is set to point to the MATLAB \r\ncompiler library location, see the `run_OSX_MATLAB` script. \r\nOtherwise, you will get a runtime error like \r\n`dyld: Library not loaded: @rpath/libmat.dylib`.\r\n\r\n    * I recommend running via a script, as otherwise setting the \r\n    `DYLD_LIBRARY_PATH` globally may interfere with Macports' `cmake` \r\n    installation (in case you use `cmake` from `macports`). If you use a \r\n    script, then the environment variable is local to the script and does not\r\n    interfere with the rest of the system.\r\n\r\n    * Example of running script, run from inside the directory where \r\n    the executable `qpp` is located:\r\n\t    \r\n            #!/bin/sh # Run Quantum++ under OS X with MATLAB support\r\n            \r\n            export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:\"/Applications/MATLAB_R2014b.app/bin/maci64\"\r\n            ./qpp\r\n\r\n- If you build a debug version with `g++` under OS X and use `gdb` to step \r\ninside template functions you may want to add `-fno-weak` compiler flag. See \r\n<http://stackoverflow.com/questions/23330641/gnu-gdb-can-not-step-into-template-functions-os-x-mavericks>\r\nfor more details about this problem.\r\n\r\n","google":"UA-56739447-2","note":"Don't delete this file! It's used internally to help with page regeneration."}